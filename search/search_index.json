{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5c06Jekyll\u8fc1\u79fb\u5230\u4e86MkDocs ... \u00b6 \u2003\u2003Jekyll\u7684\u73af\u5883\u95ee\u9898\u603b\u662f\u8ba9\u4eba\u89c9\u5f97\u5f88\u607c\u706b\uff0c\u7ed1\u5b9a\u7684gem, bundle\u5728\u5207\u6362\u7cfb\u7edf\u73af\u5883\u603b\u4f1a\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u4e3a\u4e86\u65b9\u4fbf\u5728\u5404\u79cd\u8bbe\u5907\u4e2d\u5207\u6362\u51cf\u5c11\u73af\u5883\u914d\u7f6e\u5e26\u6765\u7684\u75db\u82e6\uff0c\u51b3\u5b9a\u628a\u5c06Jekyll\u8fc1\u79fb\u5230MkDocs\u3002 \u2003\u2003MkDocs\u65b9\u4fbf\u7684\u63d2\u4ef6\u673a\u5236\u8ba9Post\u53d8\u6210\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u3002","title":"\u5c06Jekyll\u8fc1\u79fb\u5230\u4e86MkDocs ..."},{"location":"#jekyllmkdocs","text":"Jekyll\u7684\u73af\u5883\u95ee\u9898\u603b\u662f\u8ba9\u4eba\u89c9\u5f97\u5f88\u607c\u706b\uff0c\u7ed1\u5b9a\u7684gem, bundle\u5728\u5207\u6362\u7cfb\u7edf\u73af\u5883\u603b\u4f1a\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u4e3a\u4e86\u65b9\u4fbf\u5728\u5404\u79cd\u8bbe\u5907\u4e2d\u5207\u6362\u51cf\u5c11\u73af\u5883\u914d\u7f6e\u5e26\u6765\u7684\u75db\u82e6\uff0c\u51b3\u5b9a\u628a\u5c06Jekyll\u8fc1\u79fb\u5230MkDocs\u3002 \u2003\u2003MkDocs\u65b9\u4fbf\u7684\u63d2\u4ef6\u673a\u5236\u8ba9Post\u53d8\u6210\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u3002","title":"\u5c06Jekyll\u8fc1\u79fb\u5230\u4e86MkDocs ..."},{"location":"about-me/","text":"\u4e00\u540d\u7b80\u5355\u6734\u7d20\u7684\u7801\u519c \u00b6","title":"\u5173\u4e8e\u6211"},{"location":"about-me/#_1","text":"","title":"\u4e00\u540d\u7b80\u5355\u6734\u7d20\u7684\u7801\u519c"},{"location":"first-of-first/","text":"\u56de\u5f52\u521d\u5fc3 \u00b6 \u5e0c\u671b\u81ea\u5df1\u5728\u5de5\u4f5c\u95f2\u6687\u4e4b\u4f59\u4e2d\u6574\u7406\u5e76\u603b\u7ed3\u81ea\u5df1\u6240\u5b66\u5230\u77e5\u8bc6\uff0c\u8ba4\u8bc6\u81ea\u5df1\u7684\u4e0d\u8db3","title":"\u521d\u5fc3"},{"location":"first-of-first/#_1","text":"\u5e0c\u671b\u81ea\u5df1\u5728\u5de5\u4f5c\u95f2\u6687\u4e4b\u4f59\u4e2d\u6574\u7406\u5e76\u603b\u7ed3\u81ea\u5df1\u6240\u5b66\u5230\u77e5\u8bc6\uff0c\u8ba4\u8bc6\u81ea\u5df1\u7684\u4e0d\u8db3","title":"\u56de\u5f52\u521d\u5fc3"},{"location":"placeholder/","text":"Comming soon ... \u00b6","title":"Comming soon ..."},{"location":"placeholder/#comming-soon","text":"","title":"Comming soon ..."},{"location":"2021/go-di-framework-fx/","text":"Go\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6Fx \u00b6 main.go 1 2 3 4 5 6 7 8 9 10 func main () { db := NewDB () aStore := NewAStore ( db ) bStore := NewBStore ( db ) aService := NewAService ( aStore ) bService := NewBService ( bStore ) controller := NewController ( aService , bService ) srv := NewServer ( controller ) srv . Run () } \u2003\u2003\u4e60\u60ef\u4e86Spring\u7684Java\u5f00\u53d1\u8005\u5207\u6362\u5230Go\u9879\u76ee\u5f00\u53d1\u7684\u65f6\u5019\u6700\u5927\u7684\u4e0d\u9002\u5e94\u4fbf\u662fGo\u7684\u9879\u76ee\u4e2d\u603b\u662f\u5145\u65a5\u7740\u5404\u79cd\u624b\u52a8\u7684\u4f9d\u8d56\u6ce8\u5165\u3002\u8fd9\u4e9b\u521d\u59cb\u5316\u4ee3\u7801\u4e0d\u4ec5\u65e0\u804a\u4e14\u5197\u957f\uff0c\u5f53\u4f9d\u8d56\u5173\u7cfb\u6539\u53d8\u7684\u65f6\u5019\uff0c\u9700\u8981 \u5f00\u53d1\u8005\u518d\u6b21\u624b\u52a8\u5904\u7406\u8fd9\u4e9b\u4f9d\u8d56\u521d\u59cb\u5316\u5173\u7cfb\u3002\u8fd9\u5bf9\u4e8e\u4e60\u60ef\u4e86\u201c\u81ea\u52a8\u6863\u201d\u7684Javaer\u662f\u4e00\u4ef6\u76f8\u5f53\u96be\u4ee5\u5fcd\u53d7\u7684\u4e8b\u60c5...... \u4f9d\u8d56\u5173\u7cfb \u00b6 \u2003\u2003\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u603b\u662f\u57fa\u4e8e\u5e95\u5c42\u6a21\u5757\u7684\u63d0\u4f9b\u7684\u529f\u80fd\uff08\u4f9d\u8d56\uff09\uff0c\u52a0\u4e0a\u529f\u80fd\u7684\u5b9e\u73b0\uff08\u4e1a\u52a1\u903b\u8f91\uff09\uff0c\u66b4\u9732\u51fa\u76f8\u5e94\u7684\u63a5\u53e3\u7ed9\u4e0a\u5c42 Uber Fx \u6765\u62ef\u6551 \u00b6 \u2003\u2003Fx\u662fgo\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\uff0c\u65e8\u5728\u65b9\u4fbf\u4f9d\u8d56\u6ce8\u5165\uff0c\u6d88\u9664\u5168\u5c40\u53d8\u91cf\u548c func init() main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 func main () { app := fx . New ( fx . Provide ( NewDB , NewService , NewController , Server , ), fx . Invoke ( func ( srv * Server ) { go srv . Run () }), ) } fx.Provide\u548cfx.Invoke \u00b6 fx.Annotated \u00b6","title":"Go\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6Fx"},{"location":"2021/go-di-framework-fx/#gofx","text":"main.go 1 2 3 4 5 6 7 8 9 10 func main () { db := NewDB () aStore := NewAStore ( db ) bStore := NewBStore ( db ) aService := NewAService ( aStore ) bService := NewBService ( bStore ) controller := NewController ( aService , bService ) srv := NewServer ( controller ) srv . Run () } \u2003\u2003\u4e60\u60ef\u4e86Spring\u7684Java\u5f00\u53d1\u8005\u5207\u6362\u5230Go\u9879\u76ee\u5f00\u53d1\u7684\u65f6\u5019\u6700\u5927\u7684\u4e0d\u9002\u5e94\u4fbf\u662fGo\u7684\u9879\u76ee\u4e2d\u603b\u662f\u5145\u65a5\u7740\u5404\u79cd\u624b\u52a8\u7684\u4f9d\u8d56\u6ce8\u5165\u3002\u8fd9\u4e9b\u521d\u59cb\u5316\u4ee3\u7801\u4e0d\u4ec5\u65e0\u804a\u4e14\u5197\u957f\uff0c\u5f53\u4f9d\u8d56\u5173\u7cfb\u6539\u53d8\u7684\u65f6\u5019\uff0c\u9700\u8981 \u5f00\u53d1\u8005\u518d\u6b21\u624b\u52a8\u5904\u7406\u8fd9\u4e9b\u4f9d\u8d56\u521d\u59cb\u5316\u5173\u7cfb\u3002\u8fd9\u5bf9\u4e8e\u4e60\u60ef\u4e86\u201c\u81ea\u52a8\u6863\u201d\u7684Javaer\u662f\u4e00\u4ef6\u76f8\u5f53\u96be\u4ee5\u5fcd\u53d7\u7684\u4e8b\u60c5......","title":"Go\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6Fx"},{"location":"2021/go-di-framework-fx/#_1","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u603b\u662f\u57fa\u4e8e\u5e95\u5c42\u6a21\u5757\u7684\u63d0\u4f9b\u7684\u529f\u80fd\uff08\u4f9d\u8d56\uff09\uff0c\u52a0\u4e0a\u529f\u80fd\u7684\u5b9e\u73b0\uff08\u4e1a\u52a1\u903b\u8f91\uff09\uff0c\u66b4\u9732\u51fa\u76f8\u5e94\u7684\u63a5\u53e3\u7ed9\u4e0a\u5c42","title":"\u4f9d\u8d56\u5173\u7cfb"},{"location":"2021/go-di-framework-fx/#uber-fx","text":"Fx\u662fgo\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\uff0c\u65e8\u5728\u65b9\u4fbf\u4f9d\u8d56\u6ce8\u5165\uff0c\u6d88\u9664\u5168\u5c40\u53d8\u91cf\u548c func init() main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 func main () { app := fx . New ( fx . Provide ( NewDB , NewService , NewController , Server , ), fx . Invoke ( func ( srv * Server ) { go srv . Run () }), ) }","title":"Uber Fx \u6765\u62ef\u6551"},{"location":"2021/go-di-framework-fx/#fxprovidefxinvoke","text":"","title":"fx.Provide\u548cfx.Invoke"},{"location":"2021/go-di-framework-fx/#fxannotated","text":"","title":"fx.Annotated"},{"location":"2021/python-dependency-management-tools/","text":"Python\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177 \u00b6","title":"Python\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177"},{"location":"2021/python-dependency-management-tools/#python","text":"","title":"Python\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177"},{"location":"2021/relearn-golang/","text":"\u91cd\u65b0\u5b66\u4e60Go\u8bed\u8a00 \u00b6 \u5199\u5728\u524d\u9762 \u00b6 \u2003\u2003go\u8bed\u8a00\u53ef\u4ee5\u8bf4\u662f\u6211\u5b66\u4e60\u8fc7\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6700\u64cd\u86cb\u7684\uff0c\u521d\u89c1\u662f\u5728\u5b9e\u4e60\u671f\u95f4\uff082019\u5e74\uff09\uff0c\u5f53\u65f6 go vendor \u8fd8\u662f\u4e3b\u6d41\uff0c go mod \u9879\u76ee\u8fd8\u5728\u8d77\u6b65\uff0c\u5b9e\u4e60\u671f\u7b2c\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\u8fc1\u79fb\u4e00\u4e2a\u8001\u7684 vendor \u5230 mod \uff0c\u5f53\u65f6\u4f5c\u4e3a\u4e00\u540d javaer \uff0c\u5728 maven \u548c gradle \u7684\u6d17\u793c\u4e0b\uff0c\u5b9e\u5728\u662f\u65e0\u6cd5\u7406\u89e3go\u4f5c\u4e3a\u540e\u671f\u4e4b\u79c0\uff0c\u6709\u8fd9\u4e48\u591a\u73b0\u6210\u6210\u719f\u7684\u65b9\u6848\u4e0d\u53bb\u501f\u9274\uff0c\u7ed3\u679c\u641e\u51fa\u6765\u7684\u8fd9\u4e48\u4e00\u5806\u5783\u573e\u73a9\u610f\uff0c\u7740\u5b9e\u662f\u628a\u6211\u6076\u5fc3\u4e86\u4e00\u628a\u3002 \u2003\u2003\u73b0\u5728\uff082021\u5e74\uff09\u7684\u6211\u5df2\u4e0d\u518d\u662f\u5f53\u5e74\u7684\u5b9e\u4e60\u65b0\u624b\uff0c\u56e0\u79cb\u5b63\u6362\u7ec4\u7684\u5de5\u4f5c\u9700\u8981\u518d\u6b21\u5b66\u4e60\u8d77\u4e86go\u3002\u76f8\u6bd4\u4e8e\u5b9e\u4e60\u671f\u90a3\u65f6\uff0cgo\u5728\u751f\u6001\u4e0a\u5df2\u7ecf\u597d\u4e86\u592a\u591a\u3002\u867d\u7136\u5de5\u5177\u94fe\u8fd8\u662f\u90a3\u4e48\u96be\u7528 \uff0c\u81f3\u5c11\u611f\u89c9\u7ee7\u7eed\u8fed\u4ee3\u4e0a\u51e0\u5e74\uff0c\u53ef\u80fd\u4f1a\u6709\u5929\u7ffb\u5730\u8986\u7684\u53d8\u5316 \u804a\u804aGo\u7684\u8bed\u8a00\u7279\u6027 \u00b6 \u2003\u2003\u9996\u5148\u9700\u8981\u8bf4\u660e\u7684\u662f\u2014\u2014\u6211\u5e76\u4e0d\u662f\u4e00\u540dgo\u5439\uff0c\u76f8\u53cd\u6211\u6781\u5ea6\u8ba8\u538cgo\u7684\u67d0\u4e9b\u7279\u6027\uff0c\u4f46\u540c\u65f6\u4e5f\u4e0d\u5f97\u4e0d\u627f\u8ba4go\u7684\u7684\u786e\u786e\u6709\u7740\u81ea\u5df1\u7684\u4f18\u70b9\u3002\u8fd9\u91cc\u6211\u53ea\u60f3\u804a\u804a\u6211\u5728\u5b9e\u9645\u5de5\u4f5c\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u8bed\u8a00\u7279\u6027\u548c\u95ee\u9898\uff0c\u8fd9\u4e9b\u7279\u6027\u5e76\u4e0d\u662f \u8bbf\u95ee\u63a7\u5236 \u00b6 \u2003\u2003\u5c01\u88c5\u662f\u5bf9\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u5fc5\u4e0d\u53ef\u5c11\u7684\u7279\u6027\uff0c\u4e3a\u7684\u662f\u66b4\u9732\u7ed9\u7528\u6237\u8bbf\u95ee\u63a5\u53e3\u7684\u540c\u65f6\u9690\u85cf\u5b9e\u73b0\u7684\u76f8\u5173\u7ec6\u8282\u3002\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u5bf9\u5c01\u88c5\u7684\u5b9e\u73b0\u4e5f\u4e0d\u5c3d\u76f8\u540c\uff1a Note Java\u63d0\u4f9b\u4e86 private , protect , default , public \u4ee5\u53ca\u6a21\u5757\u5316\u7684 export \u5173\u952e\u5b57\u63a7\u5236 Python\u5e76\u6ca1\u6709\u63d0\u4f9b\u76f8\u5173\u673a\u5236\uff0c\u4ec5\u4f9d\u9760\u7ea6\u5b9a\u4fd7\u6210\uff1a _xx , __xx \u524d\u7f00\u4e0b\u5212\u7ebf\u544a\u77e5\u4f7f\u7528\u8005\u4e0d\u8981\u4f7f\u7528 \u2003\u2003Go\u4e3a\u4e86\u8282\u7701\u5173\u952e\u5b57\u6570\u91cf\uff0c\u4f7f\u7528\u547d\u540d\u9996\u5b57\u6bcd\u5927\u5c0f\u5199\u63a7\u5236\uff0c\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u624d\u4f1a\u5bfc\u51fa\uff1a package sample type unexport struct { Field1 string } type Export struct { ExportField string hiddenField string } \u2003\u2003\u867d\u7136\u8fd9\u6837\u505a\u53ef\u4ee5\u5728\u9605\u8bfb\u6e90\u7801\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u9996\u5b57\u6bcd\u8f7b\u6613\u5224\u65ad\u662f\u5426\u662f\u5bfc\u51fa\u5b57\u6bb5\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f1a\u9020\u6210\u4e00\u4e9b\u8be1\u5f02\u7684\u60c5\u51b5\u2014\u2014\u2014\u2014\u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u672a\u5bfc\u51fa\u7ed3\u6784\uff08\u8fd4\u56de\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u7ed3\u6784\u662f\u4e3a\u4e86\u907f\u514d\u7528\u6237\u76f4\u63a5\u7528\u7ed3\u6784\u5b9a\u4e49\u6784\u9020\u6570\u636e\uff09\uff1a package sample func Fn () unexport { return unexport { Field1 : \"field\" } } // ================== package hello import \"sample\" e := sample . Fn () e . Field1 // ok var e sample . unexport // not ok e = sample . Fn () \u2003\u2003\u53ef\u80fd\u6709\u4e9b\u7528\u6237\u8ba4\u4e3a\u5e76\u4e0d\u4f1a\u9020\u6210\u5b9e\u9645\u7684\u4f7f\u7528\u5f71\u54cd\u2014\u2014\u5168\u90fd\u7528 := \u5c31\u597d\u4e86\uff0c\u4f46\u662f\u73b0\u5b9e\u7684\u60c5\u51b5\u662f\uff0c\u5f88\u591a\u65f6\u5019\u4e0d\u5f97\u8865\u8003\u8651\u4f7f\u7528 var \u2014\u2014\u5c24\u5176\u662f\u591a\u8fd4\u56de\u503c\u548c\u91cd\u590d\u5b9a\u4e49\u7684\u95ee\u9898\u3002 \u2003\u2003\u6b64\u5916\uff0c\u65e9\u671f\u7684go\u662f\u65e0\u6cd5\u907f\u514d\u7528\u6237\u4f7f\u7528\u4f9d\u8d56\u5e93\u4e2d\u5176\u4ed6\u5176\u4ed6\u5b9e\u73b0\u6a21\u5757\u7684\u65b9\u6cd5\uff0c\u5982utils\u7b49\uff0c\u4e3a\u4e86\u5b9e\u73b0\u6a21\u5757\u5316\u7684\u9694\u79bb\uff0c1.14\u7248\u672c\u65b0\u589e\u4e86\u4e00\u9879 import \u8865\u4e01\u7ea6\u675f\uff1a internal packages \u65b9\u6cd5\uff08receiver method\uff09 \u00b6 \u2003\u2003go\u5728\u8bed\u8a00\u673a\u5236\u4e0a\u63d0\u4f9b\u4e86\u4e00\u79cd\u7c7b\u4f3cOOP\u7684method\u7684\u8bed\u6cd5\uff0c\u4e3a\u4e86\u5c01\u88c5\u5b9e\u73b0\u7ec6\u8282\uff0c\u7ed9 Person \u6dfb\u52a0 getter \u65b9\u6cd5: type Person struct { name string age int } func ( p Person ) GetName () string { return p . name } func ( p * Person ) GetAge () int { return p . age } \u2003\u2003\u672c\u8d28\u4e0a\u8fd9\u79cdreceiver method\u7684\u6548\u679c\u4e0e\u76f4\u63a5\u4f20\u53c2\u6570\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ee5\u770b\u6210\u662fgo\u7684\u4e00\u79cd\u8c03\u7528\u8bed\u6cd5\u7cd6\u3002 func GetName ( p Person ) func () string { return func () { return p . name } } func GetAge ( p * Person ) func () int { return func () { return p . age } } \u2003\u2003\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u4e0d\u540c\u4e8e Java \u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u8fd9\u79cdmethod\u7684\u5b9e\u73b0\u65b9\u5f0f\u5728\u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u5230recevier\u65f6\u662f\u4e0d\u4f1a\u9020\u6210\u7a7a\u6307\u9488\u5f02\u5e38\uff0c\u4e5f\u5c31\u662f\u8bf4 nil \u7684\u65b9\u6cd5\u8c03\u7528\u4e5f\u53ef\u80fd\u662f\u5b89\u5168\u6709\u610f\u4e49\u7684\uff1a func ( p * Person ) Whatever () string { return \"whatever\" } var person = new ( Person ) // person == nil // true _ = person . Whatever () // return \"whatever\", \u65e0nil pointer deref error \u2003\u2003\u5f00\u59cb\u5b66\u4e60\u7684\u65f6\u5019\uff0c\u6211\u603b\u662f\u4e0b\u610f\u8bc6\u7684\u5c06\u8fd9\u79cd\u673a\u5236\u4e0e kotlin \u7684 extension method \u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u671f\u671b\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u673a\u5236\u5b9e\u73b0\u4e00\u4e9b\u65b9\u4fbf\u529f\u80fd\uff0c\u5982\u94fe\u5f0f\u8c03\u7528\u3002\u4f46\u53ef\u60dc\u7684\u662f\uff0c\u5728go\u4e2d\u5bf9\u4e8e\u5b9a\u4e49receiver method\u9650\u5236\u975e\u5e38\u5f3a\uff1a receiver method\u5fc5\u987b\u548creceiver\u5b9a\u4e49\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u4e2d \uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u6ca1\u6709\u529e\u6cd5\u7ed9\u5916\u90e8\u63a5\u53e3\u5b9a\u4e49\u589e\u52a0\u65b0\u7684receiver method\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u9762\u7684\u65b9\u6cd5\u662f\u884c\u4e0d\u901a\u7684\uff1a func ( i int ) Hour () time . Duration { return time . Hour * i } // 3.Hour() \u2003\u2003\u867d\u7136golang\u4e2d \u7c7b\u578b\u522b\u540d \u548c \u65b9\u4fbf\u7684 \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 \u7b97\u662f\u7f13\u89e3(?)\u8fd9\u79cd\u60c5\u51b5\u5e26\u6765\u7684\u4e0d\u4fbf\uff0c\u4f46\u5b9e\u9645\u4f7f\u7528\u4e0b\u6765\u5b9e\u73b0\u76f8\u5f53\u7e41\u7410\uff0c\u5e0c\u671b\u540e\u7eed\u8bed\u8a00\u7684\u6f14\u5316\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u89e3\u9664\u8fd9\u79cd\u9650\u5236\uff1a type Int int64 func (i Int) Hour() time.Duration { return time.Duration(int64(time.Hour) * int64(i)) } // Int(3).Hour() 3. interface \u00b6 \u2003\u2003go\u8bed\u8a00\u4e2d\u63d0\u4f9b\u7684\u552f\u4e00\u7684\u62bd\u8c61\u65b9\u5f0f type Graph interface { AddNode ( id int64 ) AddEdge ( src , end int64 , weight float64 ) Nodes () [] int64 Neighbors ( src int64 ) [] int64 } type graphImpl struct {} func NewGraph () Graph { return & graphImpl {} } func ( impl * graphImpl ) AddNode ( id int64 ) { panic ( \"not implemented\" ) } func ( impl * graphImpl ) AddEdge ( src , end int64 , weight float64 ) { panic ( \"not implemented\" ) } func ( impl * graphImpl ) Nodes () [] int64 { panic ( \"not implemented\" ) } func ( impl * graphImpl ) Neighbors ( src int64 ) [] int64 { panic ( \"not implemented\" ) } \u2003\u2003\u7531\u4e8eGo\u6ca1\u6709\u660e\u786e\u7684 implement \u5173\u7cfb\uff0c\u4e3a\u4e86\u80fd\u5728\u7f16\u8bd1\u671f\u4fdd\u8bc1\u7ea6\u675f\u5173\u7cfb\uff0c\u5728go\u9879\u76ee\u4e2d\u4f1a\u7ecf\u5e38\u770b\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u53d8\u91cf\u58f0\u660e\uff0c\u5982\u679c\u6539\u52a8\u63a5\u53e3\u5bfc\u81f4\u5b9e\u73b0\u7f3a\u5931\u76f8\u5173\u5b9e\u73b0\u4f1a\u5728\u7f16\u8bd1\u671f\u76f4\u63a5\u62a5\u9519\uff1a // \u6a21\u62dfimplements\u8bed\u6cd5 // type GraphImpl struct implements Graph { // } var _ Graph = ( * graphImpl )( nil ) // \u4e0b\u9762\u7684\u65b9\u5f0f\u4e5f\u662f\u7c7b\u4f3c // var _ Graph = &GraphImpl{} \u2003\u2003\u8fd9\u91cc\u63d0\u4f9b\u4e86Graph\u7684\u6784\u9020\u5668\u7684\u540c\u65f6\uff0c\u5229\u7528\u8bbf\u95ee\u63a7\u5236\u4e0d\u5bfc\u51fa\u5177\u4f53\u7684\u5b9e\u73b0\u2014\u2014\u2014\u2014\u4f9d\u8d56\u63a5\u53e3\u800c\u4e0d\u662f\u5177\u4f53\u5b9e\u73b0\uff0c\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u662f\u4e00\u4e2a\u597d\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u53cd\u5c04 \u00b6 \u2003\u2003go\u8bed\u8a00\u4e0d\u63d0\u5021\u4f7f\u7528\u53cd\u5c04\u673a\u5236\uff0c\u53cd\u5c04\u7684\u5b9e\u73b0\u6027\u80fd\u4e5f\u662f\u582a\u5fe7\uff0c\u4f46\u662f\u4e3a\u4e86\u9ad8\u7ea7\u62bd\u8c61\uff0c\u4e0d\u5f97\u4e0d\u4f7f\u7528\u53cd\u5c04\u5b9e\u73b0\u76f8\u5173\u529f\u80fd\u3002 TODO","title":"\u91cd\u65b0\u5b66\u4e60Go\u8bed\u8a00"},{"location":"2021/relearn-golang/#go","text":"","title":"\u91cd\u65b0\u5b66\u4e60Go\u8bed\u8a00"},{"location":"2021/relearn-golang/#_1","text":"go\u8bed\u8a00\u53ef\u4ee5\u8bf4\u662f\u6211\u5b66\u4e60\u8fc7\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6700\u64cd\u86cb\u7684\uff0c\u521d\u89c1\u662f\u5728\u5b9e\u4e60\u671f\u95f4\uff082019\u5e74\uff09\uff0c\u5f53\u65f6 go vendor \u8fd8\u662f\u4e3b\u6d41\uff0c go mod \u9879\u76ee\u8fd8\u5728\u8d77\u6b65\uff0c\u5b9e\u4e60\u671f\u7b2c\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\u8fc1\u79fb\u4e00\u4e2a\u8001\u7684 vendor \u5230 mod \uff0c\u5f53\u65f6\u4f5c\u4e3a\u4e00\u540d javaer \uff0c\u5728 maven \u548c gradle \u7684\u6d17\u793c\u4e0b\uff0c\u5b9e\u5728\u662f\u65e0\u6cd5\u7406\u89e3go\u4f5c\u4e3a\u540e\u671f\u4e4b\u79c0\uff0c\u6709\u8fd9\u4e48\u591a\u73b0\u6210\u6210\u719f\u7684\u65b9\u6848\u4e0d\u53bb\u501f\u9274\uff0c\u7ed3\u679c\u641e\u51fa\u6765\u7684\u8fd9\u4e48\u4e00\u5806\u5783\u573e\u73a9\u610f\uff0c\u7740\u5b9e\u662f\u628a\u6211\u6076\u5fc3\u4e86\u4e00\u628a\u3002 \u2003\u2003\u73b0\u5728\uff082021\u5e74\uff09\u7684\u6211\u5df2\u4e0d\u518d\u662f\u5f53\u5e74\u7684\u5b9e\u4e60\u65b0\u624b\uff0c\u56e0\u79cb\u5b63\u6362\u7ec4\u7684\u5de5\u4f5c\u9700\u8981\u518d\u6b21\u5b66\u4e60\u8d77\u4e86go\u3002\u76f8\u6bd4\u4e8e\u5b9e\u4e60\u671f\u90a3\u65f6\uff0cgo\u5728\u751f\u6001\u4e0a\u5df2\u7ecf\u597d\u4e86\u592a\u591a\u3002\u867d\u7136\u5de5\u5177\u94fe\u8fd8\u662f\u90a3\u4e48\u96be\u7528 \uff0c\u81f3\u5c11\u611f\u89c9\u7ee7\u7eed\u8fed\u4ee3\u4e0a\u51e0\u5e74\uff0c\u53ef\u80fd\u4f1a\u6709\u5929\u7ffb\u5730\u8986\u7684\u53d8\u5316","title":"\u5199\u5728\u524d\u9762"},{"location":"2021/relearn-golang/#go_1","text":"\u9996\u5148\u9700\u8981\u8bf4\u660e\u7684\u662f\u2014\u2014\u6211\u5e76\u4e0d\u662f\u4e00\u540dgo\u5439\uff0c\u76f8\u53cd\u6211\u6781\u5ea6\u8ba8\u538cgo\u7684\u67d0\u4e9b\u7279\u6027\uff0c\u4f46\u540c\u65f6\u4e5f\u4e0d\u5f97\u4e0d\u627f\u8ba4go\u7684\u7684\u786e\u786e\u6709\u7740\u81ea\u5df1\u7684\u4f18\u70b9\u3002\u8fd9\u91cc\u6211\u53ea\u60f3\u804a\u804a\u6211\u5728\u5b9e\u9645\u5de5\u4f5c\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u8bed\u8a00\u7279\u6027\u548c\u95ee\u9898\uff0c\u8fd9\u4e9b\u7279\u6027\u5e76\u4e0d\u662f","title":"\u804a\u804aGo\u7684\u8bed\u8a00\u7279\u6027"},{"location":"2021/relearn-golang/#_2","text":"\u5c01\u88c5\u662f\u5bf9\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u5fc5\u4e0d\u53ef\u5c11\u7684\u7279\u6027\uff0c\u4e3a\u7684\u662f\u66b4\u9732\u7ed9\u7528\u6237\u8bbf\u95ee\u63a5\u53e3\u7684\u540c\u65f6\u9690\u85cf\u5b9e\u73b0\u7684\u76f8\u5173\u7ec6\u8282\u3002\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u5bf9\u5c01\u88c5\u7684\u5b9e\u73b0\u4e5f\u4e0d\u5c3d\u76f8\u540c\uff1a Note Java\u63d0\u4f9b\u4e86 private , protect , default , public \u4ee5\u53ca\u6a21\u5757\u5316\u7684 export \u5173\u952e\u5b57\u63a7\u5236 Python\u5e76\u6ca1\u6709\u63d0\u4f9b\u76f8\u5173\u673a\u5236\uff0c\u4ec5\u4f9d\u9760\u7ea6\u5b9a\u4fd7\u6210\uff1a _xx , __xx \u524d\u7f00\u4e0b\u5212\u7ebf\u544a\u77e5\u4f7f\u7528\u8005\u4e0d\u8981\u4f7f\u7528 \u2003\u2003Go\u4e3a\u4e86\u8282\u7701\u5173\u952e\u5b57\u6570\u91cf\uff0c\u4f7f\u7528\u547d\u540d\u9996\u5b57\u6bcd\u5927\u5c0f\u5199\u63a7\u5236\uff0c\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u624d\u4f1a\u5bfc\u51fa\uff1a package sample type unexport struct { Field1 string } type Export struct { ExportField string hiddenField string } \u2003\u2003\u867d\u7136\u8fd9\u6837\u505a\u53ef\u4ee5\u5728\u9605\u8bfb\u6e90\u7801\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u9996\u5b57\u6bcd\u8f7b\u6613\u5224\u65ad\u662f\u5426\u662f\u5bfc\u51fa\u5b57\u6bb5\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f1a\u9020\u6210\u4e00\u4e9b\u8be1\u5f02\u7684\u60c5\u51b5\u2014\u2014\u2014\u2014\u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u672a\u5bfc\u51fa\u7ed3\u6784\uff08\u8fd4\u56de\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u7ed3\u6784\u662f\u4e3a\u4e86\u907f\u514d\u7528\u6237\u76f4\u63a5\u7528\u7ed3\u6784\u5b9a\u4e49\u6784\u9020\u6570\u636e\uff09\uff1a package sample func Fn () unexport { return unexport { Field1 : \"field\" } } // ================== package hello import \"sample\" e := sample . Fn () e . Field1 // ok var e sample . unexport // not ok e = sample . Fn () \u2003\u2003\u53ef\u80fd\u6709\u4e9b\u7528\u6237\u8ba4\u4e3a\u5e76\u4e0d\u4f1a\u9020\u6210\u5b9e\u9645\u7684\u4f7f\u7528\u5f71\u54cd\u2014\u2014\u5168\u90fd\u7528 := \u5c31\u597d\u4e86\uff0c\u4f46\u662f\u73b0\u5b9e\u7684\u60c5\u51b5\u662f\uff0c\u5f88\u591a\u65f6\u5019\u4e0d\u5f97\u8865\u8003\u8651\u4f7f\u7528 var \u2014\u2014\u5c24\u5176\u662f\u591a\u8fd4\u56de\u503c\u548c\u91cd\u590d\u5b9a\u4e49\u7684\u95ee\u9898\u3002 \u2003\u2003\u6b64\u5916\uff0c\u65e9\u671f\u7684go\u662f\u65e0\u6cd5\u907f\u514d\u7528\u6237\u4f7f\u7528\u4f9d\u8d56\u5e93\u4e2d\u5176\u4ed6\u5176\u4ed6\u5b9e\u73b0\u6a21\u5757\u7684\u65b9\u6cd5\uff0c\u5982utils\u7b49\uff0c\u4e3a\u4e86\u5b9e\u73b0\u6a21\u5757\u5316\u7684\u9694\u79bb\uff0c1.14\u7248\u672c\u65b0\u589e\u4e86\u4e00\u9879 import \u8865\u4e01\u7ea6\u675f\uff1a internal packages","title":"\u8bbf\u95ee\u63a7\u5236"},{"location":"2021/relearn-golang/#receiver-method","text":"go\u5728\u8bed\u8a00\u673a\u5236\u4e0a\u63d0\u4f9b\u4e86\u4e00\u79cd\u7c7b\u4f3cOOP\u7684method\u7684\u8bed\u6cd5\uff0c\u4e3a\u4e86\u5c01\u88c5\u5b9e\u73b0\u7ec6\u8282\uff0c\u7ed9 Person \u6dfb\u52a0 getter \u65b9\u6cd5: type Person struct { name string age int } func ( p Person ) GetName () string { return p . name } func ( p * Person ) GetAge () int { return p . age } \u2003\u2003\u672c\u8d28\u4e0a\u8fd9\u79cdreceiver method\u7684\u6548\u679c\u4e0e\u76f4\u63a5\u4f20\u53c2\u6570\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ee5\u770b\u6210\u662fgo\u7684\u4e00\u79cd\u8c03\u7528\u8bed\u6cd5\u7cd6\u3002 func GetName ( p Person ) func () string { return func () { return p . name } } func GetAge ( p * Person ) func () int { return func () { return p . age } } \u2003\u2003\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u4e0d\u540c\u4e8e Java \u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u8fd9\u79cdmethod\u7684\u5b9e\u73b0\u65b9\u5f0f\u5728\u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u5230recevier\u65f6\u662f\u4e0d\u4f1a\u9020\u6210\u7a7a\u6307\u9488\u5f02\u5e38\uff0c\u4e5f\u5c31\u662f\u8bf4 nil \u7684\u65b9\u6cd5\u8c03\u7528\u4e5f\u53ef\u80fd\u662f\u5b89\u5168\u6709\u610f\u4e49\u7684\uff1a func ( p * Person ) Whatever () string { return \"whatever\" } var person = new ( Person ) // person == nil // true _ = person . Whatever () // return \"whatever\", \u65e0nil pointer deref error \u2003\u2003\u5f00\u59cb\u5b66\u4e60\u7684\u65f6\u5019\uff0c\u6211\u603b\u662f\u4e0b\u610f\u8bc6\u7684\u5c06\u8fd9\u79cd\u673a\u5236\u4e0e kotlin \u7684 extension method \u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u671f\u671b\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u673a\u5236\u5b9e\u73b0\u4e00\u4e9b\u65b9\u4fbf\u529f\u80fd\uff0c\u5982\u94fe\u5f0f\u8c03\u7528\u3002\u4f46\u53ef\u60dc\u7684\u662f\uff0c\u5728go\u4e2d\u5bf9\u4e8e\u5b9a\u4e49receiver method\u9650\u5236\u975e\u5e38\u5f3a\uff1a receiver method\u5fc5\u987b\u548creceiver\u5b9a\u4e49\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u4e2d \uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u6ca1\u6709\u529e\u6cd5\u7ed9\u5916\u90e8\u63a5\u53e3\u5b9a\u4e49\u589e\u52a0\u65b0\u7684receiver method\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u9762\u7684\u65b9\u6cd5\u662f\u884c\u4e0d\u901a\u7684\uff1a func ( i int ) Hour () time . Duration { return time . Hour * i } // 3.Hour() \u2003\u2003\u867d\u7136golang\u4e2d \u7c7b\u578b\u522b\u540d \u548c \u65b9\u4fbf\u7684 \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 \u7b97\u662f\u7f13\u89e3(?)\u8fd9\u79cd\u60c5\u51b5\u5e26\u6765\u7684\u4e0d\u4fbf\uff0c\u4f46\u5b9e\u9645\u4f7f\u7528\u4e0b\u6765\u5b9e\u73b0\u76f8\u5f53\u7e41\u7410\uff0c\u5e0c\u671b\u540e\u7eed\u8bed\u8a00\u7684\u6f14\u5316\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u89e3\u9664\u8fd9\u79cd\u9650\u5236\uff1a type Int int64 func (i Int) Hour() time.Duration { return time.Duration(int64(time.Hour) * int64(i)) } // Int(3).Hour()","title":"\u65b9\u6cd5\uff08receiver method\uff09"},{"location":"2021/relearn-golang/#3-interface","text":"go\u8bed\u8a00\u4e2d\u63d0\u4f9b\u7684\u552f\u4e00\u7684\u62bd\u8c61\u65b9\u5f0f type Graph interface { AddNode ( id int64 ) AddEdge ( src , end int64 , weight float64 ) Nodes () [] int64 Neighbors ( src int64 ) [] int64 } type graphImpl struct {} func NewGraph () Graph { return & graphImpl {} } func ( impl * graphImpl ) AddNode ( id int64 ) { panic ( \"not implemented\" ) } func ( impl * graphImpl ) AddEdge ( src , end int64 , weight float64 ) { panic ( \"not implemented\" ) } func ( impl * graphImpl ) Nodes () [] int64 { panic ( \"not implemented\" ) } func ( impl * graphImpl ) Neighbors ( src int64 ) [] int64 { panic ( \"not implemented\" ) } \u2003\u2003\u7531\u4e8eGo\u6ca1\u6709\u660e\u786e\u7684 implement \u5173\u7cfb\uff0c\u4e3a\u4e86\u80fd\u5728\u7f16\u8bd1\u671f\u4fdd\u8bc1\u7ea6\u675f\u5173\u7cfb\uff0c\u5728go\u9879\u76ee\u4e2d\u4f1a\u7ecf\u5e38\u770b\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u53d8\u91cf\u58f0\u660e\uff0c\u5982\u679c\u6539\u52a8\u63a5\u53e3\u5bfc\u81f4\u5b9e\u73b0\u7f3a\u5931\u76f8\u5173\u5b9e\u73b0\u4f1a\u5728\u7f16\u8bd1\u671f\u76f4\u63a5\u62a5\u9519\uff1a // \u6a21\u62dfimplements\u8bed\u6cd5 // type GraphImpl struct implements Graph { // } var _ Graph = ( * graphImpl )( nil ) // \u4e0b\u9762\u7684\u65b9\u5f0f\u4e5f\u662f\u7c7b\u4f3c // var _ Graph = &GraphImpl{} \u2003\u2003\u8fd9\u91cc\u63d0\u4f9b\u4e86Graph\u7684\u6784\u9020\u5668\u7684\u540c\u65f6\uff0c\u5229\u7528\u8bbf\u95ee\u63a7\u5236\u4e0d\u5bfc\u51fa\u5177\u4f53\u7684\u5b9e\u73b0\u2014\u2014\u2014\u2014\u4f9d\u8d56\u63a5\u53e3\u800c\u4e0d\u662f\u5177\u4f53\u5b9e\u73b0\uff0c\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u662f\u4e00\u4e2a\u597d\u7684\u6700\u4f73\u5b9e\u8df5\u3002","title":"3. interface"},{"location":"2021/relearn-golang/#_3","text":"go\u8bed\u8a00\u4e0d\u63d0\u5021\u4f7f\u7528\u53cd\u5c04\u673a\u5236\uff0c\u53cd\u5c04\u7684\u5b9e\u73b0\u6027\u80fd\u4e5f\u662f\u582a\u5fe7\uff0c\u4f46\u662f\u4e3a\u4e86\u9ad8\u7ea7\u62bd\u8c61\uff0c\u4e0d\u5f97\u4e0d\u4f7f\u7528\u53cd\u5c04\u5b9e\u73b0\u76f8\u5173\u529f\u80fd\u3002 TODO","title":"\u53cd\u5c04"},{"location":"2021/uber-cadence/","text":"Uber Cadence\u5de5\u4f5c\u6d41\u5f15\u64ce \u00b6 \u6700\u8fd1\u4e00\u5e74\uff082021\uff09\u4e00\u76f4\u5fd9\u4e8e\u4efb\u52a1\u8c03\u5ea6\u76f8\u5173\u7684\u5de5\u4f5c\uff0c\u4ece\u6700\u5f00\u59cb\u7684\u4e1a\u52a1\u4ee3\u7801\u903b\u8f91\u5b9e\u73b0\u5de5\u4f5c\u6d41\uff0c\u6162\u6162\u8d70\u5411\u5f00\u6e90\u5de5\u4f5c\u6d41\u5f15\u64ce\u7684\u4f7f\u7528 \u5de5\u4f5c\u6d41 \u00b6 Temporal \u7684\u4e00\u7bc7\u535a\u6587 Designing A Workflow Engine from First Principles \u63cf\u8ff0\u4e86\u5982\u4f55\u8bbe\u8ba1\u5de5\u4f5c\u6d41\u7cfb\u7edf\uff1a 1. \u72b6\u6001\u673a \u00b6 graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; 2. \u4efb\u52a1\u961f\u5217 \u00b6 3. \u5b9a\u65f6\u5668 \u00b6 4. \u4e00\u81f4\u6027\u4e0e\u4e8b\u52a1 \u00b6 Celery \u00b6 \u5982\u679c Uber Cadence \u00b6 \u5b66\u4e60 Cadence \u7684\u6700\u4f73\u65b9\u5f0f\u662f\u53bb\u5b66\u4e60 Temporal \uff0c\u4e0d\u5f97\u4e0d\u8bf4cadence\u7684\u6a21\u578b\u62bd\u8c61\u4e0d\u540c\u4e8e\u5e38\u89c4\u4efb\u52a1\u961f\u5217\u65b9\u5f0f\u5b9e\u73b0\u7684\uff0c \u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u5b98\u65b9\u6587\u6863\u5e2e\u52a9\u5e76\u6ca1\u6709\u540e\u6765\u8005 Temporal cadence \u7684\u7f16\u7a0b\u6a21\u578b\u5efa\u7acb\u5728\u4e24\u4e2a\u6781\u4e3a\u91cd\u8981\u7684\u6982\u5ff5\u4e0a\uff1a Workflow \u548c Activity Workflow \u00b6 \u5728\u4e00\u4e9b\u5176\u4ed6\u7684\u5de5\u4f5c\u6d41\u6846\u67b6\u4e2d\uff0cworkflow\u53ef\u80fd\u662f\u4ee5DSL\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5982Netflix\u7684conductor\u63d0\u4f9b\u7684workflow\u63cf\u8ff0\u8bed\u8a00\u3002 { \"name\" : \"workflow-sample\" , \"description\" : \"workflow sample\" , \"version\" : 1 , \"tasks\" : [ { \"name\" : \"encode\" , \"taskReferenceName\" : \"encode\" , \"type\" : \"SIMPLE\" , \"inputParameters\" : { \"fileLocation\" : \"${workflow.input.fileLocation}\" } }, { \"name\" : \"switch_task\" , \"taskReferenceName\" : \"switch\" , \"inputParameters\" : { \"case_value_param\" : \"${workflow.input.movieType}\" }, \"type\" : \"SWITCH\" , \"evaluatorType\" : \"value-param\" , \"expression\" : \"case_value_param\" , \"decisionCases\" : { \"Show\" : [ { \"name\" : \"setup_episodes\" , \"taskReferenceName\" : \"se1\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" }, { \"name\" : \"generate_episode_artwork\" , \"taskReferenceName\" : \"ga\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" } ], \"Movie\" : [ { \"name\" : \"setup_movie\" , \"taskReferenceName\" : \"sm\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" }, { \"name\" : \"generate_movie_artwork\" , \"taskReferenceName\" : \"gma\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" } ] } } ], \"outputParameters\" : { \"cdn_url\" : \"${d1.output.location}\" }, \"failureWorkflow\" : \"cleanup_encode_resources\" , \"restartable\" : true , \"workflowStatusListenerEnabled\" : true , \"schemaVersion\" : 2 , \"ownerEmail\" : \"foo@bar.com\" } \u4f46 cadence \u5e76\u4e0d\u76f4\u63a5\u63d0\u4f9bDSL\u65b9\u5f0f\uff0c\u800c\u662f\u63d0\u4f9b\u7f16\u7a0b\u63a5\u53e3\u3002\u727a\u7272\u4e86\u7b80\u5355\u6613\u7528\u7684\u76f4\u63a5DSL\u65b9\u5f0f\uff0c\u6362\u6765\u7684\u662f\u5f3a\u5927\u7684\u7075\u6d3b\u7684\u529f\u80fd\u3002 \u5de5\u4f5c\u6d41 func PaymentWorkflow ( ctx workflow . Context , userID string , intervals [] int ) error { // Send reminder emails, e.g. after 1, 7, and 30 days for _ , interval := range intervals { _ = workflow . Sleep ( ctx , days ( interval )) // Sleep for days! _ = workflow . ExecuteActivity ( ctx , SendEmail , userID ). Get ( ctx , nil ) // Activities have timeouts, and will be retried by default! } // ... } Activity \u00b6 cadence","title":"Uber Cadence\u5de5\u4f5c\u6d41\u5f15\u64ce"},{"location":"2021/uber-cadence/#uber-cadence","text":"\u6700\u8fd1\u4e00\u5e74\uff082021\uff09\u4e00\u76f4\u5fd9\u4e8e\u4efb\u52a1\u8c03\u5ea6\u76f8\u5173\u7684\u5de5\u4f5c\uff0c\u4ece\u6700\u5f00\u59cb\u7684\u4e1a\u52a1\u4ee3\u7801\u903b\u8f91\u5b9e\u73b0\u5de5\u4f5c\u6d41\uff0c\u6162\u6162\u8d70\u5411\u5f00\u6e90\u5de5\u4f5c\u6d41\u5f15\u64ce\u7684\u4f7f\u7528","title":"Uber Cadence\u5de5\u4f5c\u6d41\u5f15\u64ce"},{"location":"2021/uber-cadence/#_1","text":"Temporal \u7684\u4e00\u7bc7\u535a\u6587 Designing A Workflow Engine from First Principles \u63cf\u8ff0\u4e86\u5982\u4f55\u8bbe\u8ba1\u5de5\u4f5c\u6d41\u7cfb\u7edf\uff1a","title":"\u5de5\u4f5c\u6d41"},{"location":"2021/uber-cadence/#1","text":"graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"1. \u72b6\u6001\u673a"},{"location":"2021/uber-cadence/#2","text":"","title":"2. \u4efb\u52a1\u961f\u5217"},{"location":"2021/uber-cadence/#3","text":"","title":"3. \u5b9a\u65f6\u5668"},{"location":"2021/uber-cadence/#4","text":"","title":"4. \u4e00\u81f4\u6027\u4e0e\u4e8b\u52a1"},{"location":"2021/uber-cadence/#celery","text":"\u5982\u679c","title":"Celery"},{"location":"2021/uber-cadence/#uber-cadence_1","text":"\u5b66\u4e60 Cadence \u7684\u6700\u4f73\u65b9\u5f0f\u662f\u53bb\u5b66\u4e60 Temporal \uff0c\u4e0d\u5f97\u4e0d\u8bf4cadence\u7684\u6a21\u578b\u62bd\u8c61\u4e0d\u540c\u4e8e\u5e38\u89c4\u4efb\u52a1\u961f\u5217\u65b9\u5f0f\u5b9e\u73b0\u7684\uff0c \u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u5b98\u65b9\u6587\u6863\u5e2e\u52a9\u5e76\u6ca1\u6709\u540e\u6765\u8005 Temporal cadence \u7684\u7f16\u7a0b\u6a21\u578b\u5efa\u7acb\u5728\u4e24\u4e2a\u6781\u4e3a\u91cd\u8981\u7684\u6982\u5ff5\u4e0a\uff1a Workflow \u548c Activity","title":"Uber Cadence"},{"location":"2021/uber-cadence/#workflow","text":"\u5728\u4e00\u4e9b\u5176\u4ed6\u7684\u5de5\u4f5c\u6d41\u6846\u67b6\u4e2d\uff0cworkflow\u53ef\u80fd\u662f\u4ee5DSL\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5982Netflix\u7684conductor\u63d0\u4f9b\u7684workflow\u63cf\u8ff0\u8bed\u8a00\u3002 { \"name\" : \"workflow-sample\" , \"description\" : \"workflow sample\" , \"version\" : 1 , \"tasks\" : [ { \"name\" : \"encode\" , \"taskReferenceName\" : \"encode\" , \"type\" : \"SIMPLE\" , \"inputParameters\" : { \"fileLocation\" : \"${workflow.input.fileLocation}\" } }, { \"name\" : \"switch_task\" , \"taskReferenceName\" : \"switch\" , \"inputParameters\" : { \"case_value_param\" : \"${workflow.input.movieType}\" }, \"type\" : \"SWITCH\" , \"evaluatorType\" : \"value-param\" , \"expression\" : \"case_value_param\" , \"decisionCases\" : { \"Show\" : [ { \"name\" : \"setup_episodes\" , \"taskReferenceName\" : \"se1\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" }, { \"name\" : \"generate_episode_artwork\" , \"taskReferenceName\" : \"ga\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" } ], \"Movie\" : [ { \"name\" : \"setup_movie\" , \"taskReferenceName\" : \"sm\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" }, { \"name\" : \"generate_movie_artwork\" , \"taskReferenceName\" : \"gma\" , \"inputParameters\" : { \"movieId\" : \"${workflow.input.movieId}\" }, \"type\" : \"SIMPLE\" } ] } } ], \"outputParameters\" : { \"cdn_url\" : \"${d1.output.location}\" }, \"failureWorkflow\" : \"cleanup_encode_resources\" , \"restartable\" : true , \"workflowStatusListenerEnabled\" : true , \"schemaVersion\" : 2 , \"ownerEmail\" : \"foo@bar.com\" } \u4f46 cadence \u5e76\u4e0d\u76f4\u63a5\u63d0\u4f9bDSL\u65b9\u5f0f\uff0c\u800c\u662f\u63d0\u4f9b\u7f16\u7a0b\u63a5\u53e3\u3002\u727a\u7272\u4e86\u7b80\u5355\u6613\u7528\u7684\u76f4\u63a5DSL\u65b9\u5f0f\uff0c\u6362\u6765\u7684\u662f\u5f3a\u5927\u7684\u7075\u6d3b\u7684\u529f\u80fd\u3002 \u5de5\u4f5c\u6d41 func PaymentWorkflow ( ctx workflow . Context , userID string , intervals [] int ) error { // Send reminder emails, e.g. after 1, 7, and 30 days for _ , interval := range intervals { _ = workflow . Sleep ( ctx , days ( interval )) // Sleep for days! _ = workflow . ExecuteActivity ( ctx , SendEmail , userID ). Get ( ctx , nil ) // Activities have timeouts, and will be retried by default! } // ... }","title":"Workflow"},{"location":"2021/uber-cadence/#activity","text":"cadence","title":"Activity"},{"location":"2022/go-dynamic-config/","text":"1. \u7248\u6743\u58f0\u660e \u00b6 Copyright // Copyright (c) 2021 Uber Technologies, Inc. // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. 2. \u5ba2\u6237\u7aef\u63a5\u53e3 \u00b6 Client type Filter int // Client allows fetching values from a dynamic configuration system NOTE: This does not have async // options right now. In the interest of keeping it minimal, we can add when requirement arises. type Client interface { GetValue ( name Key , defaultValue interface {}) ( interface {}, error ) GetValueWithFilters ( name Key , filters map [ Filter ] interface {}, defaultValue interface {}) ( interface {}, error ) GetIntValue ( name Key , filters map [ Filter ] interface {}, defaultValue int ) ( int , error ) GetFloatValue ( name Key , filters map [ Filter ] interface {}, defaultValue float64 ) ( float64 , error ) GetBoolValue ( name Key , filters map [ Filter ] interface {}, defaultValue bool ) ( bool , error ) GetStringValue ( name Key , filters map [ Filter ] interface {}, defaultValue string ) ( string , error ) GetMapValue ( name Key , filters map [ Filter ] interface {}, defaultValue map [ string ] interface {}, ) ( map [ string ] interface {}, error ) GetDurationValue ( name Key , filters map [ Filter ] interface {}, defaultValue time . Duration , ) ( time . Duration , error ) // UpdateValue takes value as map and updates by overriding. It doesn't support update with filters. UpdateValue ( name Key , value interface {}) error RestoreValue ( name Key , filters map [ Filter ] interface {}) error ListValue ( name Key ) ([] * types . DynamicConfigEntry , error ) } 3. File Based Client \u00b6 fileBasedClient // FileBasedClientConfig is the config for the file based dynamic config client. // It specifies where the config file is stored and how often the config should be // updated by checking the config file again. type FileBasedClientConfig struct { Filepath string `yaml:\"filepath\"` PollInterval time . Duration `yaml:\"pollInterval\"` } type fileBasedClient struct { values atomic . Value // \u539f\u5b50\u5b58\u50a8 lastUpdatedTime time . Time // \u6700\u540e\u66f4\u65b0\u65f6\u95f4 config * FileBasedClientConfig doneCh chan struct {} // \u5173\u95edchannel logger log . Logger } 3.2 \u6784\u9020\u5668 \u00b6 NewFileBasedClient \u6784\u9020\u5668\u96c6\u6210\u76f8\u5173\u7684\u914d\u7f6e\u3001logger\u4ee5\u53ca\u63a5\u6536\u5173\u95ed\u4fe1\u53f7\u7684channel doneCh \u3002\u5b9e\u73b0\u4e2d\u5c1d\u8bd5\u9996\u6b21 update \u52a0\u8f7d\u6570\u636e\uff0c\u5982\u679c\u62a5\u9519\u76f4\u63a5error\u8fd4\u56de\uff0c\u5982\u679c\u6b63\u5e38\u8bbe\u5b9a\u5b9a\u65f6\u5668\u5b9a\u65f6 update \u3002 NewFileBasedClient // NewFileBasedClient creates a file based client. func NewFileBasedClient ( config * FileBasedClientConfig , logger log . Logger , doneCh chan struct {}) ( Client , error ) { if err := validateConfig ( config ); err != nil { return nil , err } client := & fileBasedClient { config : config , doneCh : doneCh , logger : logger , } if err := client . update (); err != nil { // first update check not failed return nil , err } go func () { // tick update ticker := time . NewTicker ( client . config . PollInterval ) for { select { case <- ticker . C : err := client . update () if err != nil { // if err happened, only log and do nothing client . logger . Error ( \"Failed to update dynamic config\" , tag . Error ( err )) } case <- client . doneCh : ticker . Stop () return } } }() return client , nil } update \u51fd\u6570\u901a\u8fc7\u83b7\u53d6\u6587\u4ef6\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4\u5224\u5b9a\u65f6\u5019\u9700\u8981\u91cd\u65b0load\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a update func ( fc * fileBasedClient ) update () error { defer func () { fc . lastUpdatedTime = time . Now () }() newValues := make ( map [ string ][] * constrainedValue ) info , err := os . Stat ( fc . config . Filepath ) // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f if err != nil { return fmt . Errorf ( \"failed to get status of dynamic config file: %v\" , err ) } if ! info . ModTime (). After ( fc . lastUpdatedTime ) { // \u5bf9\u6bd4\u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4 return nil } confContent , err := ioutil . ReadFile ( fc . config . Filepath ) if err != nil { return fmt . Errorf ( \"failed to read dynamic config file %v: %v\" , fc . config . Filepath , err ) } if err = yaml . Unmarshal ( confContent , newValues ); err != nil { return fmt . Errorf ( \"failed to decode dynamic config %v\" , err ) } return fc . storeValues ( newValues ) } 4. Collection \u00b6 \u4f7f\u7528Client\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u7528\u6237\u4f7f\u7528 value := client.GetValue(\"key\", nil) \u4fdd\u5b58\u4e86\u914d\u7f6e\u503c\uff0c\u6709\u53ef\u80fd\u5bfc\u81f4\u65e0\u6cd5\u83b7\u53d6\u66f4\u65b0\u540e\u7684\u914d\u7f6e\u3002\u9700\u8981\u5bf9\u914d\u7f6e\u8fdb\u884c\u4e00\u5c42\u5c01\u88c5\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f Collection \u3002 Collection // Collection wraps dynamic config client with a closure so that across the code, the config values // can be directly accessed by calling the function without propagating the client everywhere in // code type Collection struct { client Client // wrapper of Client logger log . Logger logKeys * sync . Map // map of config Keys for logging to capture changes errCount int64 filterOptions [] FilterOption } 4.1 NewCollection \u00b6 \u6784\u9020\u5668\u7684\u5b9e\u73b0\u662f trivial \u7684\uff1a NewCollection // NewCollection creates a new collection func NewCollection ( client Client , logger log . Logger , filterOptions ... FilterOption , ) * Collection { return & Collection { client : client , logger : logger , logKeys : & sync . Map {}, errCount : - 1 , filterOptions : filterOptions , } } 4.2 PropertyFn \u00b6 \u8fd9\u91cc\u4f7f\u7528\u4e86 thunk \u65b9\u5f0f\u7684wrapper\uff0c\u4e0d\u662f\u76f4\u63a5\u83b7\u53d6value\uff0c\u800c\u662f\u8fd4\u56devalue\u7684function: PropertyFn // PropertyFn is a wrapper to get property from dynamic config type PropertyFn func () interface {} // IntPropertyFn is a wrapper to get int property from dynamic config type IntPropertyFn func ( opts ... FilterOption ) int // GetProperty gets a interface property and returns defaultValue if property is not found func ( c * Collection ) GetProperty ( key Key , defaultValue interface {}) PropertyFn { return func () interface {} { val , err := c . client . GetValue ( key , defaultValue ) if err != nil { c . logError ( key , nil , err ) } c . logValue ( key , nil , val , defaultValue , reflect . DeepEqual ) return val } } // GetIntProperty gets property and asserts that it's an integer func ( c * Collection ) GetIntProperty ( key Key , defaultValue int ) IntPropertyFn { return func ( opts ... FilterOption ) int { filters := c . toFilterMap ( opts ... ) val , err := c . client . GetIntValue ( key , filters , defaultValue , ) if err != nil { c . logError ( key , filters , err ) } c . logValue ( key , filters , val , defaultValue , intCompareEquals ) return val } } \u5177\u4f53\u4f7f\u7528\u4e0a\u662f\u5148\u83b7\u53d6 PropertyFn \uff0c\u4e4b\u540e\u5bf9\u51fd\u6570\u6c42\u503c\uff1a Usage prop := c . GetProperty ( \"key\" , nil ) value := prop () \u6700\u540e\uff0c\u4e00\u4e2a\u914d\u7f6e\u7ed3\u6784\u4f53\u7684\u53d8\u6210\u4e86\u5982\u4e0b\u60c5\u5f62\uff1a Config // Config represents configuration for cadence-frontend service type Config struct { PersistenceMaxQPS dynamicconfig . IntPropertyFn PersistenceGlobalMaxQPS dynamicconfig . IntPropertyFn EnableVisibilitySampling dynamicconfig . BoolPropertyFn EnableReadFromClosedExecutionV2 dynamicconfig . BoolPropertyFn // ... } \u6240\u6709\u7684\u5b57\u6bb5\u7684\u503c\u90fd\u662f\u4e00\u4e2a PropertyFn \u3002 5. \u6301\u4e45\u5316\u5b58\u50a8 \u00b6 5.1 configStoreClient \u00b6 \u6301\u4e45\u5316\u914d\u7f6e\u5b58\u50a8\u7684 client \u5b9e\u73b0\u662f\u7c7b\u4f3c\u7684\uff1a configStoreClient type configStoreClient struct { values atomic . Value lastUpdatedTime time . Time config * csc . ClientConfig configStoreManager persistence . ConfigStoreManager doneCh chan struct {} logger log . Logger } type configStoreClient struct { values atomic . Value lastUpdatedTime time . Time config * csc . ClientConfig configStoreManager persistence . ConfigStoreManager doneCh chan struct {} logger log . Logger } 5.2 \u6784\u9020\u5668 \u00b6 \u6784\u9020\u5668\u5b9e\u73b0\u7c7b\u4f3c fileBasedClient \uff0c\u540c\u6837\u901a\u8fc7\u5b9e\u73b0\u4e86\u5b9a\u65f6\u66f4\u65b0\u7684\u7b56\u7565\u3002 NewConfigStoreClient // NewConfigStoreClient creates a config store client func NewConfigStoreClient ( clientCfg * csc . ClientConfig , persistenceCfg * config . Persistence , logger log . Logger , doneCh chan struct {}) ( dc . Client , error ) { if err := validateClientConfig ( clientCfg ); err != nil { logger . Error ( \"Invalid Client Config Values, Using Default Values\" ) clientCfg = defaultConfigValues } if persistenceCfg == nil { return nil , errors . New ( \"persistence cfg is nil\" ) } else if persistenceCfg . DefaultStore != \"cass-default\" { return nil , fmt . Errorf ( \"persistence cfg default store is not Cassandra\" ) } else if store , ok := persistenceCfg . DataStores [ persistenceCfg . DefaultStore ]; ! ok { return nil , errors . New ( \"persistence cfg datastores missing Cassandra\" ) } else if store . NoSQL == nil { return nil , errors . New ( \"NoSQL struct is nil\" ) } client , err := newConfigStoreClient ( clientCfg , persistenceCfg . DataStores [ persistenceCfg . DefaultStore ]. NoSQL , logger , doneCh ) if err != nil { return nil , err } err = client . startUpdate () if err != nil { return nil , err } return client , nil } func ( csc * configStoreClient ) startUpdate () error { if err := csc . update (); err != nil { return err } go func () { ticker := time . NewTicker ( csc . config . PollInterval ) for { select { case <- ticker . C : err := csc . update () if err != nil { csc . logger . Error ( \"Failed to update dynamic config\" , tag . Error ( err )) } case <- csc . doneCh : ticker . Stop () return } } }() return nil } update \u7684\u5177\u4f53\u5b9e\u73b0\u4e0d\u8fc7\u662f\u901a\u8fc7 configStoreManager \u4ece\u6301\u4e45\u5316\u5b58\u50a8\u4e2d\u83b7\u53d6\u6570\u636e\u800c\u5df2\u3002 update func ( csc * configStoreClient ) update () error { ctx , cancel := context . WithTimeout ( context . Background (), csc . config . FetchTimeout ) defer cancel () res , err := csc . configStoreManager . FetchDynamicConfig ( ctx ) select { case <- ctx . Done (): return errors . New ( \"timeout error on fetch\" ) default : if err != nil { return fmt . Errorf ( \"failed to fetch dynamic config snapshot %v\" , err ) } if res != nil && res . Snapshot != nil { defer func () { csc . lastUpdatedTime = time . Now () }() return csc . storeValues ( res . Snapshot ) } } return nil } \u8fd9\u91cc\u4e0d\u518d\u8ba8\u8bba FetchDynamicConfig \u7684\u5177\u4f53\u5b9e\u73b0\u4e86\uff0c\u4e0d\u8fc7\u662f\u5bf9SQL\u7684\u5c01\u88c5\u3002 6. \u603b\u7ed3 \u00b6 Dynamic Config \u7684\u5c01\u88c5\u5b9e\u73b0\uff0c\u53ef\u4ee5\u505a\u5230\u5bf9\u914d\u7f6e\u7684\u4fee\u6539\u800c\u4e0d\u7528\u91cd\u542f\u670d\u52a1\u3002\u62bd\u8c61\u63a5\u53e3 Client \u4e0b\u53ef\u4ee5\u4f7f\u7528 filedBaseClient \u6216\u8005 configStoreClient \u3002\u4e24\u8005\u7684\u5b9e\u73b0\u601d\u8def\u57fa\u672c\u76f8\u540c\uff0c\u90fd\u662f\u8bbe\u7f6e\u4e86\u5b9a\u65f6\u5668\u7684\u65b9\u5f0f\uff0c\u5b9a\u65f6\u66f4\u65b0\u914d\u7f6e\u3002\u540c\u65f6\u4e3a\u4e86\u9632\u6b62\u914d\u7f6e\u88ab\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u901a\u8fc7 PropertyFn \u5c01\u88c5\u4e86\u5bf9\u914d\u7f6e\u7684\u8bbf\u95ee\u3002 Client \u63a5\u53e3\u5b9e\u73b0\u7684\u601d\u8def\u662f\u7684\u62bd\u8c61\u975e\u5e38\u5e72\u51c0\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5207\u6362\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u4f7f\u7528ETCD\u7b49\u670d\u52a1\u771f\u6b63\u5b9e\u73b0\u5b9e\u65f6\u54cd\u5e94\u7684\u914d\u7f6e\u4fee\u6539\u3002 \u540c\u65f6\u5bf9\u4e8e fileBasedClient \u7684\u7406\u8bba\u4e0a\u4e0d\u4e00\u5b9a\u9700\u8981\u4f7f\u7528\u5b9a\u65f6\u5668\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u901a\u8fc7\u6587\u4ef6\u76d1\u542c\u7684\u65b9\u5f0f\u4e5f\u662f\u53ef\u884c\u7684\u3002","title":"Go Dynamic Config"},{"location":"2022/go-dynamic-config/#1","text":"Copyright // Copyright (c) 2021 Uber Technologies, Inc. // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE.","title":"1. \u7248\u6743\u58f0\u660e"},{"location":"2022/go-dynamic-config/#2","text":"Client type Filter int // Client allows fetching values from a dynamic configuration system NOTE: This does not have async // options right now. In the interest of keeping it minimal, we can add when requirement arises. type Client interface { GetValue ( name Key , defaultValue interface {}) ( interface {}, error ) GetValueWithFilters ( name Key , filters map [ Filter ] interface {}, defaultValue interface {}) ( interface {}, error ) GetIntValue ( name Key , filters map [ Filter ] interface {}, defaultValue int ) ( int , error ) GetFloatValue ( name Key , filters map [ Filter ] interface {}, defaultValue float64 ) ( float64 , error ) GetBoolValue ( name Key , filters map [ Filter ] interface {}, defaultValue bool ) ( bool , error ) GetStringValue ( name Key , filters map [ Filter ] interface {}, defaultValue string ) ( string , error ) GetMapValue ( name Key , filters map [ Filter ] interface {}, defaultValue map [ string ] interface {}, ) ( map [ string ] interface {}, error ) GetDurationValue ( name Key , filters map [ Filter ] interface {}, defaultValue time . Duration , ) ( time . Duration , error ) // UpdateValue takes value as map and updates by overriding. It doesn't support update with filters. UpdateValue ( name Key , value interface {}) error RestoreValue ( name Key , filters map [ Filter ] interface {}) error ListValue ( name Key ) ([] * types . DynamicConfigEntry , error ) }","title":"2. \u5ba2\u6237\u7aef\u63a5\u53e3"},{"location":"2022/go-dynamic-config/#3-file-based-client","text":"fileBasedClient // FileBasedClientConfig is the config for the file based dynamic config client. // It specifies where the config file is stored and how often the config should be // updated by checking the config file again. type FileBasedClientConfig struct { Filepath string `yaml:\"filepath\"` PollInterval time . Duration `yaml:\"pollInterval\"` } type fileBasedClient struct { values atomic . Value // \u539f\u5b50\u5b58\u50a8 lastUpdatedTime time . Time // \u6700\u540e\u66f4\u65b0\u65f6\u95f4 config * FileBasedClientConfig doneCh chan struct {} // \u5173\u95edchannel logger log . Logger }","title":"3. File Based Client"},{"location":"2022/go-dynamic-config/#32","text":"NewFileBasedClient \u6784\u9020\u5668\u96c6\u6210\u76f8\u5173\u7684\u914d\u7f6e\u3001logger\u4ee5\u53ca\u63a5\u6536\u5173\u95ed\u4fe1\u53f7\u7684channel doneCh \u3002\u5b9e\u73b0\u4e2d\u5c1d\u8bd5\u9996\u6b21 update \u52a0\u8f7d\u6570\u636e\uff0c\u5982\u679c\u62a5\u9519\u76f4\u63a5error\u8fd4\u56de\uff0c\u5982\u679c\u6b63\u5e38\u8bbe\u5b9a\u5b9a\u65f6\u5668\u5b9a\u65f6 update \u3002 NewFileBasedClient // NewFileBasedClient creates a file based client. func NewFileBasedClient ( config * FileBasedClientConfig , logger log . Logger , doneCh chan struct {}) ( Client , error ) { if err := validateConfig ( config ); err != nil { return nil , err } client := & fileBasedClient { config : config , doneCh : doneCh , logger : logger , } if err := client . update (); err != nil { // first update check not failed return nil , err } go func () { // tick update ticker := time . NewTicker ( client . config . PollInterval ) for { select { case <- ticker . C : err := client . update () if err != nil { // if err happened, only log and do nothing client . logger . Error ( \"Failed to update dynamic config\" , tag . Error ( err )) } case <- client . doneCh : ticker . Stop () return } } }() return client , nil } update \u51fd\u6570\u901a\u8fc7\u83b7\u53d6\u6587\u4ef6\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4\u5224\u5b9a\u65f6\u5019\u9700\u8981\u91cd\u65b0load\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a update func ( fc * fileBasedClient ) update () error { defer func () { fc . lastUpdatedTime = time . Now () }() newValues := make ( map [ string ][] * constrainedValue ) info , err := os . Stat ( fc . config . Filepath ) // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f if err != nil { return fmt . Errorf ( \"failed to get status of dynamic config file: %v\" , err ) } if ! info . ModTime (). After ( fc . lastUpdatedTime ) { // \u5bf9\u6bd4\u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4 return nil } confContent , err := ioutil . ReadFile ( fc . config . Filepath ) if err != nil { return fmt . Errorf ( \"failed to read dynamic config file %v: %v\" , fc . config . Filepath , err ) } if err = yaml . Unmarshal ( confContent , newValues ); err != nil { return fmt . Errorf ( \"failed to decode dynamic config %v\" , err ) } return fc . storeValues ( newValues ) }","title":"3.2 \u6784\u9020\u5668"},{"location":"2022/go-dynamic-config/#4-collection","text":"\u4f7f\u7528Client\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u7528\u6237\u4f7f\u7528 value := client.GetValue(\"key\", nil) \u4fdd\u5b58\u4e86\u914d\u7f6e\u503c\uff0c\u6709\u53ef\u80fd\u5bfc\u81f4\u65e0\u6cd5\u83b7\u53d6\u66f4\u65b0\u540e\u7684\u914d\u7f6e\u3002\u9700\u8981\u5bf9\u914d\u7f6e\u8fdb\u884c\u4e00\u5c42\u5c01\u88c5\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f Collection \u3002 Collection // Collection wraps dynamic config client with a closure so that across the code, the config values // can be directly accessed by calling the function without propagating the client everywhere in // code type Collection struct { client Client // wrapper of Client logger log . Logger logKeys * sync . Map // map of config Keys for logging to capture changes errCount int64 filterOptions [] FilterOption }","title":"4. Collection"},{"location":"2022/go-dynamic-config/#41-newcollection","text":"\u6784\u9020\u5668\u7684\u5b9e\u73b0\u662f trivial \u7684\uff1a NewCollection // NewCollection creates a new collection func NewCollection ( client Client , logger log . Logger , filterOptions ... FilterOption , ) * Collection { return & Collection { client : client , logger : logger , logKeys : & sync . Map {}, errCount : - 1 , filterOptions : filterOptions , } }","title":"4.1 NewCollection"},{"location":"2022/go-dynamic-config/#42-propertyfn","text":"\u8fd9\u91cc\u4f7f\u7528\u4e86 thunk \u65b9\u5f0f\u7684wrapper\uff0c\u4e0d\u662f\u76f4\u63a5\u83b7\u53d6value\uff0c\u800c\u662f\u8fd4\u56devalue\u7684function: PropertyFn // PropertyFn is a wrapper to get property from dynamic config type PropertyFn func () interface {} // IntPropertyFn is a wrapper to get int property from dynamic config type IntPropertyFn func ( opts ... FilterOption ) int // GetProperty gets a interface property and returns defaultValue if property is not found func ( c * Collection ) GetProperty ( key Key , defaultValue interface {}) PropertyFn { return func () interface {} { val , err := c . client . GetValue ( key , defaultValue ) if err != nil { c . logError ( key , nil , err ) } c . logValue ( key , nil , val , defaultValue , reflect . DeepEqual ) return val } } // GetIntProperty gets property and asserts that it's an integer func ( c * Collection ) GetIntProperty ( key Key , defaultValue int ) IntPropertyFn { return func ( opts ... FilterOption ) int { filters := c . toFilterMap ( opts ... ) val , err := c . client . GetIntValue ( key , filters , defaultValue , ) if err != nil { c . logError ( key , filters , err ) } c . logValue ( key , filters , val , defaultValue , intCompareEquals ) return val } } \u5177\u4f53\u4f7f\u7528\u4e0a\u662f\u5148\u83b7\u53d6 PropertyFn \uff0c\u4e4b\u540e\u5bf9\u51fd\u6570\u6c42\u503c\uff1a Usage prop := c . GetProperty ( \"key\" , nil ) value := prop () \u6700\u540e\uff0c\u4e00\u4e2a\u914d\u7f6e\u7ed3\u6784\u4f53\u7684\u53d8\u6210\u4e86\u5982\u4e0b\u60c5\u5f62\uff1a Config // Config represents configuration for cadence-frontend service type Config struct { PersistenceMaxQPS dynamicconfig . IntPropertyFn PersistenceGlobalMaxQPS dynamicconfig . IntPropertyFn EnableVisibilitySampling dynamicconfig . BoolPropertyFn EnableReadFromClosedExecutionV2 dynamicconfig . BoolPropertyFn // ... } \u6240\u6709\u7684\u5b57\u6bb5\u7684\u503c\u90fd\u662f\u4e00\u4e2a PropertyFn \u3002","title":"4.2 PropertyFn"},{"location":"2022/go-dynamic-config/#5","text":"","title":"5. \u6301\u4e45\u5316\u5b58\u50a8"},{"location":"2022/go-dynamic-config/#51-configstoreclient","text":"\u6301\u4e45\u5316\u914d\u7f6e\u5b58\u50a8\u7684 client \u5b9e\u73b0\u662f\u7c7b\u4f3c\u7684\uff1a configStoreClient type configStoreClient struct { values atomic . Value lastUpdatedTime time . Time config * csc . ClientConfig configStoreManager persistence . ConfigStoreManager doneCh chan struct {} logger log . Logger } type configStoreClient struct { values atomic . Value lastUpdatedTime time . Time config * csc . ClientConfig configStoreManager persistence . ConfigStoreManager doneCh chan struct {} logger log . Logger }","title":"5.1 configStoreClient"},{"location":"2022/go-dynamic-config/#52","text":"\u6784\u9020\u5668\u5b9e\u73b0\u7c7b\u4f3c fileBasedClient \uff0c\u540c\u6837\u901a\u8fc7\u5b9e\u73b0\u4e86\u5b9a\u65f6\u66f4\u65b0\u7684\u7b56\u7565\u3002 NewConfigStoreClient // NewConfigStoreClient creates a config store client func NewConfigStoreClient ( clientCfg * csc . ClientConfig , persistenceCfg * config . Persistence , logger log . Logger , doneCh chan struct {}) ( dc . Client , error ) { if err := validateClientConfig ( clientCfg ); err != nil { logger . Error ( \"Invalid Client Config Values, Using Default Values\" ) clientCfg = defaultConfigValues } if persistenceCfg == nil { return nil , errors . New ( \"persistence cfg is nil\" ) } else if persistenceCfg . DefaultStore != \"cass-default\" { return nil , fmt . Errorf ( \"persistence cfg default store is not Cassandra\" ) } else if store , ok := persistenceCfg . DataStores [ persistenceCfg . DefaultStore ]; ! ok { return nil , errors . New ( \"persistence cfg datastores missing Cassandra\" ) } else if store . NoSQL == nil { return nil , errors . New ( \"NoSQL struct is nil\" ) } client , err := newConfigStoreClient ( clientCfg , persistenceCfg . DataStores [ persistenceCfg . DefaultStore ]. NoSQL , logger , doneCh ) if err != nil { return nil , err } err = client . startUpdate () if err != nil { return nil , err } return client , nil } func ( csc * configStoreClient ) startUpdate () error { if err := csc . update (); err != nil { return err } go func () { ticker := time . NewTicker ( csc . config . PollInterval ) for { select { case <- ticker . C : err := csc . update () if err != nil { csc . logger . Error ( \"Failed to update dynamic config\" , tag . Error ( err )) } case <- csc . doneCh : ticker . Stop () return } } }() return nil } update \u7684\u5177\u4f53\u5b9e\u73b0\u4e0d\u8fc7\u662f\u901a\u8fc7 configStoreManager \u4ece\u6301\u4e45\u5316\u5b58\u50a8\u4e2d\u83b7\u53d6\u6570\u636e\u800c\u5df2\u3002 update func ( csc * configStoreClient ) update () error { ctx , cancel := context . WithTimeout ( context . Background (), csc . config . FetchTimeout ) defer cancel () res , err := csc . configStoreManager . FetchDynamicConfig ( ctx ) select { case <- ctx . Done (): return errors . New ( \"timeout error on fetch\" ) default : if err != nil { return fmt . Errorf ( \"failed to fetch dynamic config snapshot %v\" , err ) } if res != nil && res . Snapshot != nil { defer func () { csc . lastUpdatedTime = time . Now () }() return csc . storeValues ( res . Snapshot ) } } return nil } \u8fd9\u91cc\u4e0d\u518d\u8ba8\u8bba FetchDynamicConfig \u7684\u5177\u4f53\u5b9e\u73b0\u4e86\uff0c\u4e0d\u8fc7\u662f\u5bf9SQL\u7684\u5c01\u88c5\u3002","title":"5.2 \u6784\u9020\u5668"},{"location":"2022/go-dynamic-config/#6","text":"Dynamic Config \u7684\u5c01\u88c5\u5b9e\u73b0\uff0c\u53ef\u4ee5\u505a\u5230\u5bf9\u914d\u7f6e\u7684\u4fee\u6539\u800c\u4e0d\u7528\u91cd\u542f\u670d\u52a1\u3002\u62bd\u8c61\u63a5\u53e3 Client \u4e0b\u53ef\u4ee5\u4f7f\u7528 filedBaseClient \u6216\u8005 configStoreClient \u3002\u4e24\u8005\u7684\u5b9e\u73b0\u601d\u8def\u57fa\u672c\u76f8\u540c\uff0c\u90fd\u662f\u8bbe\u7f6e\u4e86\u5b9a\u65f6\u5668\u7684\u65b9\u5f0f\uff0c\u5b9a\u65f6\u66f4\u65b0\u914d\u7f6e\u3002\u540c\u65f6\u4e3a\u4e86\u9632\u6b62\u914d\u7f6e\u88ab\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u901a\u8fc7 PropertyFn \u5c01\u88c5\u4e86\u5bf9\u914d\u7f6e\u7684\u8bbf\u95ee\u3002 Client \u63a5\u53e3\u5b9e\u73b0\u7684\u601d\u8def\u662f\u7684\u62bd\u8c61\u975e\u5e38\u5e72\u51c0\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5207\u6362\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u4f7f\u7528ETCD\u7b49\u670d\u52a1\u771f\u6b63\u5b9e\u73b0\u5b9e\u65f6\u54cd\u5e94\u7684\u914d\u7f6e\u4fee\u6539\u3002 \u540c\u65f6\u5bf9\u4e8e fileBasedClient \u7684\u7406\u8bba\u4e0a\u4e0d\u4e00\u5b9a\u9700\u8981\u4f7f\u7528\u5b9a\u65f6\u5668\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u901a\u8fc7\u6587\u4ef6\u76d1\u542c\u7684\u65b9\u5f0f\u4e5f\u662f\u53ef\u884c\u7684\u3002","title":"6. \u603b\u7ed3"},{"location":"2022/go-future-implementation/","text":"1. \u524d\u8a00 \u00b6 \u6700\u8fd1\u56e0\u5de5\u4f5c\u9700\u8981\u63a5\u89e6Uber\u7684Golang\u9879\u76ee\u6bd4\u8f83\u591a\uff0c\u95f2\u6687\u4e4b\u4f59\u5b66\u4e60\u4e0bUber\u7684\u5f00\u6e90\u9879\u76ee\u5de5\u5177\u5e93\u4e2d\u4e00\u4e9b\u5c0f\u5de7\u7684\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u3002 2. \u4ee3\u7801\u7248\u6743\u5148\u884c\u58f0\u660e \u00b6 Copyright // Copyright (c) 2021 Uber Technologies, Inc. // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. 3. Future & Settable \u63a5\u53e3 \u00b6 Future \u548c Settable \u662ffuture\u5b9e\u73b0\u7684\u4e24\u4e2a\u63a5\u53e3\uff0c\u524d\u8005\u63d0\u4f9bread\u65b9\u6cd5\uff0c\u540e\u8005\u63d0\u4f9bwrite\u65b9\u6cd5\u3002 type ( Future interface { Get ( ctx context . Context , valuePtr interface {}) error IsReady () bool } Settable interface { Set ( interface {}, error ) } ) \u5bf9\u4e8ereader\u83b7\u53d6Future\u503c\u7684\u4e24\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528 IsReady \uff08\u975e\u963b\u585e\uff09\u5224\u65adfuture\u662f\u5426\u5b8c\u6210\uff0c\u7136\u540e\u8c03\u7528 Get \u83b7\u53d6\u503c \u4f7f\u7528 Get \uff08\u963b\u585e\uff09\u83b7\u53d6future\u503c \u5bf9\u4e8ewriter\u5199\u5165future\u503c\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a Set(value, nil) , \u8bbe\u7f6efuture\u503c Set(nil, err) \uff0c\u8bbe\u7f6eerror 4. \u5b9e\u73b0\u7ec6\u8282 \u00b6 4.1 futureImpl \u00b6 type futureImpl struct { value interface {} err error readyCh chan struct {} status int32 } \u7ed3\u6784\u4f53 futureImpl \u4e2d\u5b57\u6bb5\uff1a value \u5b58\u653efuture\u503c err \u5b58\u653eerror\u503c\uff0c err \u548c value \u4e24\u8005\u5fc5\u987b\u81f3\u5c11\u4e00\u4e2a\u4e3a nil readyCh \u6807\u5fd7future\u662f\u5426\u5b8c\u6210channel status \u8bbe\u7f6efuture\u7684\u539f\u5b50\u9501, \u503c\u4e3a valueNotSet = 0 \u6216\u8005 valueSet = 1 4.2 \u6784\u9020\u5668 NewFuture \u00b6 NewFuture \u540c\u65f6\u8fd4\u56de\u4f5c\u4e3a Future , Settable \u63a5\u53e3\u7684\u503c\u3002\u6784\u9020\u5668\u9690\u85cf\u5185\u90e8\u5177\u4f53\u5b9e\u73b0\u4e0d\u5e94\u8be5\u76f4\u63a5\u8fd4\u56de *futureImpl \uff0c\u5e94\u8be5\u8fd4\u56de\u62bd\u8c61\u3002 func NewFuture () ( Future , Settable ) { future := & futureImpl { readyCh : make ( chan struct {}), status : valueNotSet , } return future , future } 4.3 \u5b9e\u73b0Future\u63a5\u53e3\u65b9\u6cd5 \u00b6 IsReady \u5b9e\u73b0\u662f\u5224\u65ad readCh channel\u662f\u5426\u63a5\u6536\u8fc7\u503c\uff0c\u901a\u8fc7 select \u548c default \u9632\u6b62\u963b\u585e\u3002\u5199\u5165\u4fe1\u53f7\u5230channel readCh \u7684\u903b\u8f91\u6709 Set \u8d1f\u8d23\u5b9e\u73b0 \u3002 func ( f * futureImpl ) IsReady () bool { select { case <- f . readCh : return true default : return false } } Get \u963b\u585e\u83b7\u53d6\u503c\u5199\u5165\u5230 valuePtr \u4e2d\uff0c\u540c\u65f6\u9700\u8981\u9002\u914d Context \u53c2\u6570\u3002\u5199\u5165\u5230 valuePtr \u662f\u7531 popluateValue \u5b9e\u73b0 // var _ Future = (*futureImpl)(nil) func ( f * futureImpl ) Get ( ctx context . Context , valuePtr interface {}) error { if err := ctx . Err (); err != nil { // if the given context is invalid, // guarantee to return an error return err } select { case <- f . readyCh : return f . popluateValue ( valuePtr ) case <- ctx . Done (): return ctx . Err () } } popluateValue \u5177\u4f53\u662f\u901a\u8fc7\u53cd\u5c04\u5b9e\u73b0\u503c\u5199\u5165\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u8003\u8651 panic \u60c5\u5f62 func ( f * futureImpl ) populateValue ( valuePtr interface {}) ( err error ) { defer func () { if p := recover (); p != nil { err = fmt . Errorf ( \"failed to populate valuePtr: %v\" , p ) } }() if f . err != nil || f . value == nil || valuePtr == nil { // \u4f18\u5148\u8fd4\u56deerror return f . err } rf := reflect . ValueOf ( valuePtr ) if rf . Type (). Kind () != reflect . Ptr { // valuePtr\u5fc5\u987b\u662f\u6307\u9488 return errors . New ( \"valuePtr parameter is not a pointer\" ) } fv := reflect . ValueOf ( f . value ) if fv . IsValid () { rf . Elem (). Set ( fv ) // \u503c\u5199\u5165 } return nil } 4.4 \u5b9e\u73b0Settable\u63a5\u53e3\u65b9\u6cd5 \u00b6 Set \u63a5\u53e3\u7684\u5b9e\u73b0\u662f\u76f8\u5f53\u76f4\u767d\u7684\uff0c\u628avalue\u548cerr\u5199\u5165\u5230futureImpl\u4e2d\u5373\u53ef\u3002 // var _ Settable = (*futureImpl)(nil) func ( f * futureImpl ) Set ( value interface {}, err error ) { if ! atomic . CompareAndSwapInt32 ( & f . status , valueNotSet , valueSet ) { // atomic lock panic ( \"future has already been set\" ) } f . value = value f . err = err close ( f . readyCh ) // \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u5173\u95edchannel\uff0c\u9632\u6b62\u6cc4\u6f0f } \u9700\u8981\u6ce8\u610f\u5230 Set \u9700\u8981\u540c\u65f6\u8d1f\u8d23\u5173\u95edchannel readyCh \uff0c\u5373\u4f7f\u662f\u5bf9\u4e8e Get / IsReady \uff0c\u5373\u4f7f\u662f\u5173\u95ed\u7684channel\uff0c\u4e5f\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u5728Golang\u4e2d value , ok <- f . readyCh // ok\u6807\u8bc6channel\u662f\u5426\u5173\u95ed","title":"Go Future"},{"location":"2022/go-future-implementation/#1","text":"\u6700\u8fd1\u56e0\u5de5\u4f5c\u9700\u8981\u63a5\u89e6Uber\u7684Golang\u9879\u76ee\u6bd4\u8f83\u591a\uff0c\u95f2\u6687\u4e4b\u4f59\u5b66\u4e60\u4e0bUber\u7684\u5f00\u6e90\u9879\u76ee\u5de5\u5177\u5e93\u4e2d\u4e00\u4e9b\u5c0f\u5de7\u7684\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u3002","title":"1. \u524d\u8a00"},{"location":"2022/go-future-implementation/#2","text":"Copyright // Copyright (c) 2021 Uber Technologies, Inc. // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE.","title":"2. \u4ee3\u7801\u7248\u6743\u5148\u884c\u58f0\u660e"},{"location":"2022/go-future-implementation/#3-future-settable","text":"Future \u548c Settable \u662ffuture\u5b9e\u73b0\u7684\u4e24\u4e2a\u63a5\u53e3\uff0c\u524d\u8005\u63d0\u4f9bread\u65b9\u6cd5\uff0c\u540e\u8005\u63d0\u4f9bwrite\u65b9\u6cd5\u3002 type ( Future interface { Get ( ctx context . Context , valuePtr interface {}) error IsReady () bool } Settable interface { Set ( interface {}, error ) } ) \u5bf9\u4e8ereader\u83b7\u53d6Future\u503c\u7684\u4e24\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528 IsReady \uff08\u975e\u963b\u585e\uff09\u5224\u65adfuture\u662f\u5426\u5b8c\u6210\uff0c\u7136\u540e\u8c03\u7528 Get \u83b7\u53d6\u503c \u4f7f\u7528 Get \uff08\u963b\u585e\uff09\u83b7\u53d6future\u503c \u5bf9\u4e8ewriter\u5199\u5165future\u503c\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a Set(value, nil) , \u8bbe\u7f6efuture\u503c Set(nil, err) \uff0c\u8bbe\u7f6eerror","title":"3. Future &amp; Settable \u63a5\u53e3"},{"location":"2022/go-future-implementation/#4","text":"","title":"4. \u5b9e\u73b0\u7ec6\u8282"},{"location":"2022/go-future-implementation/#41-futureimpl","text":"type futureImpl struct { value interface {} err error readyCh chan struct {} status int32 } \u7ed3\u6784\u4f53 futureImpl \u4e2d\u5b57\u6bb5\uff1a value \u5b58\u653efuture\u503c err \u5b58\u653eerror\u503c\uff0c err \u548c value \u4e24\u8005\u5fc5\u987b\u81f3\u5c11\u4e00\u4e2a\u4e3a nil readyCh \u6807\u5fd7future\u662f\u5426\u5b8c\u6210channel status \u8bbe\u7f6efuture\u7684\u539f\u5b50\u9501, \u503c\u4e3a valueNotSet = 0 \u6216\u8005 valueSet = 1","title":"4.1 futureImpl"},{"location":"2022/go-future-implementation/#42-newfuture","text":"NewFuture \u540c\u65f6\u8fd4\u56de\u4f5c\u4e3a Future , Settable \u63a5\u53e3\u7684\u503c\u3002\u6784\u9020\u5668\u9690\u85cf\u5185\u90e8\u5177\u4f53\u5b9e\u73b0\u4e0d\u5e94\u8be5\u76f4\u63a5\u8fd4\u56de *futureImpl \uff0c\u5e94\u8be5\u8fd4\u56de\u62bd\u8c61\u3002 func NewFuture () ( Future , Settable ) { future := & futureImpl { readyCh : make ( chan struct {}), status : valueNotSet , } return future , future }","title":"4.2 \u6784\u9020\u5668NewFuture"},{"location":"2022/go-future-implementation/#43-future","text":"IsReady \u5b9e\u73b0\u662f\u5224\u65ad readCh channel\u662f\u5426\u63a5\u6536\u8fc7\u503c\uff0c\u901a\u8fc7 select \u548c default \u9632\u6b62\u963b\u585e\u3002\u5199\u5165\u4fe1\u53f7\u5230channel readCh \u7684\u903b\u8f91\u6709 Set \u8d1f\u8d23\u5b9e\u73b0 \u3002 func ( f * futureImpl ) IsReady () bool { select { case <- f . readCh : return true default : return false } } Get \u963b\u585e\u83b7\u53d6\u503c\u5199\u5165\u5230 valuePtr \u4e2d\uff0c\u540c\u65f6\u9700\u8981\u9002\u914d Context \u53c2\u6570\u3002\u5199\u5165\u5230 valuePtr \u662f\u7531 popluateValue \u5b9e\u73b0 // var _ Future = (*futureImpl)(nil) func ( f * futureImpl ) Get ( ctx context . Context , valuePtr interface {}) error { if err := ctx . Err (); err != nil { // if the given context is invalid, // guarantee to return an error return err } select { case <- f . readyCh : return f . popluateValue ( valuePtr ) case <- ctx . Done (): return ctx . Err () } } popluateValue \u5177\u4f53\u662f\u901a\u8fc7\u53cd\u5c04\u5b9e\u73b0\u503c\u5199\u5165\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u8003\u8651 panic \u60c5\u5f62 func ( f * futureImpl ) populateValue ( valuePtr interface {}) ( err error ) { defer func () { if p := recover (); p != nil { err = fmt . Errorf ( \"failed to populate valuePtr: %v\" , p ) } }() if f . err != nil || f . value == nil || valuePtr == nil { // \u4f18\u5148\u8fd4\u56deerror return f . err } rf := reflect . ValueOf ( valuePtr ) if rf . Type (). Kind () != reflect . Ptr { // valuePtr\u5fc5\u987b\u662f\u6307\u9488 return errors . New ( \"valuePtr parameter is not a pointer\" ) } fv := reflect . ValueOf ( f . value ) if fv . IsValid () { rf . Elem (). Set ( fv ) // \u503c\u5199\u5165 } return nil }","title":"4.3 \u5b9e\u73b0Future\u63a5\u53e3\u65b9\u6cd5"},{"location":"2022/go-future-implementation/#44-settable","text":"Set \u63a5\u53e3\u7684\u5b9e\u73b0\u662f\u76f8\u5f53\u76f4\u767d\u7684\uff0c\u628avalue\u548cerr\u5199\u5165\u5230futureImpl\u4e2d\u5373\u53ef\u3002 // var _ Settable = (*futureImpl)(nil) func ( f * futureImpl ) Set ( value interface {}, err error ) { if ! atomic . CompareAndSwapInt32 ( & f . status , valueNotSet , valueSet ) { // atomic lock panic ( \"future has already been set\" ) } f . value = value f . err = err close ( f . readyCh ) // \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u5173\u95edchannel\uff0c\u9632\u6b62\u6cc4\u6f0f } \u9700\u8981\u6ce8\u610f\u5230 Set \u9700\u8981\u540c\u65f6\u8d1f\u8d23\u5173\u95edchannel readyCh \uff0c\u5373\u4f7f\u662f\u5bf9\u4e8e Get / IsReady \uff0c\u5373\u4f7f\u662f\u5173\u95ed\u7684channel\uff0c\u4e5f\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u5728Golang\u4e2d value , ok <- f . readyCh // ok\u6807\u8bc6channel\u662f\u5426\u5173\u95ed","title":"4.4 \u5b9e\u73b0Settable\u63a5\u53e3\u65b9\u6cd5"},{"location":"2022/go-lock-context/","text":"1. \u4ee3\u7801\u7248\u6743\u5148\u884c\u58f0\u660e \u00b6 // Copyright (c) 2017 Uber Technologies, Inc. // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. 2. Lock \u00b6 golang\u7684 sync \u63d0\u4f9b\u4e86Locker\u63a5\u53e3 // A Locker represents an object that can be locked and unlocked. type Locker interface { Lock () Unlock () } \u4f46\u662fLock\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b context.Context \uff0cUber\u5c01\u88c5\u4e86\u4e00\u5957\u9002\u914d\u7684\u63a5\u53e3\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0cancelable\uff0ctimeout lock\u7b49\u529f\u80fd // Mutex accepts a context in its Lock method. // It blocks the goroutine until either the lock is acquired or the context // is closed. type Mutex interface { Lock ( context . Context ) error Unlock () } 3. \u5b9e\u73b0\u7ec6\u8282 \u00b6 3.1 mutexImpl & NewMutex \u00b6 mutexImpl \u662f\u5bf9 sync.Mutex \u7684\u5c01\u88c5\uff0c\u7ed3\u6784\u548c\u6784\u9020\u5668\u975e\u5e38\u7b80\u5355\u660e\u4e86 type mutexImpl struct { sync . Mutex } func NewMutex () { return & mutexImpl {} // \u9ed8\u8ba4sync.Mutex\u503c\u5c31\u591f\u7528\u4e86 } \u5b9e\u73b0Mutex\u63a5\u53e3\u65b9\u6cd5 \u00b6 Lock \u662f\u7531 lockInternal \u5b9e\u73b0\u7684\uff0c\u7531\u4e8e context.Context \u53ef\u80fd\u4f1a\u5728lock\u8fc7\u7a0b\u4e2d\u5173\u95ed\uff0c\u9700\u8981\u8003\u8651\u91ca\u653e\u3002\u901a\u8fc7\u8bbe\u7f6e state \u539f\u5b50\u9501\u786e\u4fdd\u9501\u7684\u6b63\u786e\u83b7\u53d6\u548c\u91ca\u653e\u3002 const ( acquiring = iota acquired bailed ) func ( m * mutexImpl ) Lock ( ctx context . Context ) error { return m . lockInternal ( ctx ) } func ( m * mutexImpl ) lockInternal ( ctx context . Context ) error { var state int32 = acquiring acquiredCh := make ( chan struct {}) go func () { m . Mutex . Lock () if ! atomic . CompareAndSwapInt32 ( & state , acquiring , acquired ) { // already bailed due to context closing m . Unlock () } close ( acquiredCh ) }() select { case <- acquiredCh : // race return nil case <- ctx . Done (): // race { if ! atomic . CompareAndSwapInt32 ( & state , acquiring , bailed ) { // \u68c0\u6d4b\u662f\u5426\u56e0\u4e3acontext\u8fc7\u671f\u5bfc\u81f4lock\u5931\u8d25 return nil } return ctx . Err () } } } Unlock \u53ef\u4ee5\u590d\u7528 sync.Mutex \u7684 Unlock \u3002","title":"Go Lock"},{"location":"2022/go-lock-context/#1","text":"// Copyright (c) 2017 Uber Technologies, Inc. // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE.","title":"1. \u4ee3\u7801\u7248\u6743\u5148\u884c\u58f0\u660e"},{"location":"2022/go-lock-context/#2-lock","text":"golang\u7684 sync \u63d0\u4f9b\u4e86Locker\u63a5\u53e3 // A Locker represents an object that can be locked and unlocked. type Locker interface { Lock () Unlock () } \u4f46\u662fLock\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b context.Context \uff0cUber\u5c01\u88c5\u4e86\u4e00\u5957\u9002\u914d\u7684\u63a5\u53e3\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0cancelable\uff0ctimeout lock\u7b49\u529f\u80fd // Mutex accepts a context in its Lock method. // It blocks the goroutine until either the lock is acquired or the context // is closed. type Mutex interface { Lock ( context . Context ) error Unlock () }","title":"2. Lock"},{"location":"2022/go-lock-context/#3","text":"","title":"3. \u5b9e\u73b0\u7ec6\u8282"},{"location":"2022/go-lock-context/#31-muteximpl-newmutex","text":"mutexImpl \u662f\u5bf9 sync.Mutex \u7684\u5c01\u88c5\uff0c\u7ed3\u6784\u548c\u6784\u9020\u5668\u975e\u5e38\u7b80\u5355\u660e\u4e86 type mutexImpl struct { sync . Mutex } func NewMutex () { return & mutexImpl {} // \u9ed8\u8ba4sync.Mutex\u503c\u5c31\u591f\u7528\u4e86 }","title":"3.1 mutexImpl &amp; NewMutex"},{"location":"2022/go-lock-context/#mutex","text":"Lock \u662f\u7531 lockInternal \u5b9e\u73b0\u7684\uff0c\u7531\u4e8e context.Context \u53ef\u80fd\u4f1a\u5728lock\u8fc7\u7a0b\u4e2d\u5173\u95ed\uff0c\u9700\u8981\u8003\u8651\u91ca\u653e\u3002\u901a\u8fc7\u8bbe\u7f6e state \u539f\u5b50\u9501\u786e\u4fdd\u9501\u7684\u6b63\u786e\u83b7\u53d6\u548c\u91ca\u653e\u3002 const ( acquiring = iota acquired bailed ) func ( m * mutexImpl ) Lock ( ctx context . Context ) error { return m . lockInternal ( ctx ) } func ( m * mutexImpl ) lockInternal ( ctx context . Context ) error { var state int32 = acquiring acquiredCh := make ( chan struct {}) go func () { m . Mutex . Lock () if ! atomic . CompareAndSwapInt32 ( & state , acquiring , acquired ) { // already bailed due to context closing m . Unlock () } close ( acquiredCh ) }() select { case <- acquiredCh : // race return nil case <- ctx . Done (): // race { if ! atomic . CompareAndSwapInt32 ( & state , acquiring , bailed ) { // \u68c0\u6d4b\u662f\u5426\u56e0\u4e3acontext\u8fc7\u671f\u5bfc\u81f4lock\u5931\u8d25 return nil } return ctx . Err () } } } Unlock \u53ef\u4ee5\u590d\u7528 sync.Mutex \u7684 Unlock \u3002","title":"\u5b9e\u73b0Mutex\u63a5\u53e3\u65b9\u6cd5"}]}